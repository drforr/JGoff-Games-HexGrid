#!/usr/local/bin/perl

use strict;
use warnings;

use Readonly;
use Carp qw( croak );
use Try::Tiny;

use SDL;
use SDL::Rect;
use SDL::Surface;
use SDL::Video;
use SDL::Event;
use SDL::Events;
use Games::FrozenBubble::Stuff; # For the correct delay function

use lib "./lib";
use JGoff::Games::HexGrid::Draw;
use JGoff::Games::HexGrid::Viewport;

Readonly my %viewport => ( w => 640, h => 480, d => 32 );
Readonly my %world => ( w => 1024, h => 768, d => 32 );
Readonly my $TARGET_ANIM_SPEED => 60;

my $frame = 0;
my $sdl_flags =
  SDL_HWSURFACE |
  SDL_DOUBLEBUF |
  SDL_HWACCEL |
  SDL_ASYNCBLIT;
my @update_rects;
my $event = SDL::Event->new;

SDL::init(SDL_INIT_EVERYTHING);

my $app = SDL::Video::set_video_mode(
  $viewport{w}, $viewport{h}, $viewport{d}, 0
);
SDL::Events::enable_unicode(1);

my @cell_size = ( 40, 40 );
my @cells = ( 24, 24 ); # 24*40+5 = 1005 < 1024
                        # 24*40*0.75+5 = 725 < 768
my $vp = JGoff::Games::HexGrid::Viewport->new(
  world => [ 24, 24 ],
  viewport => [ 0, 0, 15, 15 ]
);
$vp->center;
#use YAML;die Dump($vp);
my $ghd = JGoff::Games::HexGrid::Draw->new(
  cell_size => \@cell_size,
  cells => \@cells
);

#
# Center the actor in the viewport
#
my @actor = (
  $vp->cursor->[0],
  $vp->cursor->[1],
);

# {{{ terrain

my @terrain = (
   #                       1 1 1 1 1 1 1 1 1 1 2 2 2 2 
   #   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
  [qw( . . . . . : : : : | | | : : : : : : . . . . . . )],
  [qw( . . . : : : : | | | | | | | | : : . . . . . . . )],
  [qw( . . : : : | | | | | | | | | : : . . : : : : . . )],
  [qw( . : : : | | | | | | | | : : . . . : : | | : : . )],
  [qw( . : : : : : : : : : : : : . . . . . . . . . . . )],
  [qw( : : : / / / / / : : . . . . . . . . . . . . . . )],
  [qw( . . : : v v v : : : . . . . . . . . . . . . . . )],
  [qw( . . : : / / / / : : . . . . . . . . . . . . . . )],
  [qw( / . . / / / / / / : . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . / / . . . . . . . . . . . )],
  [qw( . . . . . . . . . . / / / . . . . . . . . . . . )],
  [qw( . . . / / . . . . . / / . . . . . . . . . . . . )],
  [qw( . . / v / . . . . . . . . . . . . . . . . . . . )],
  [qw( . . / / . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )],
  [qw( . . . . . . . . . . . . . . . . . . . . . . . . )]
);

# }}}

#
# Create the hex-grid background
#
my $background = SDL::Surface->new(
  0, $world{w}, $world{h}, $world{d}, 0
);
SDL::Video::fill_rect(
  $background,
  SDL::Rect->new(
    0, 0, $background->w, $background->h,
  ),
  SDL::Video::map_RGBA( $background->format(), 0, 0, 0, 255 ),
);
$ghd->draw(
  surface => $background,
  color => SDL::Video::map_RGBA( $background->format(), 0, 0, 255, 255 ),
);

# {{{ Color code for terrain

my $alpha = 255;
my %color_code = (
  '.' => [ 0, 0, 255, $alpha ],
  ':' => [ 0, 255, 0, $alpha ],
  '|' => [ 205, 133, 63, $alpha ],
  '/' => [ 192, 192, 192, $alpha ],
  'v' => [ 64, 64, 64, $alpha ],
);

# }}}

my %tile;

for ( keys %color_code ) {
  $tile{$_} = $ghd->tile_surface(
    depth => $world{d},
    color => $color_code{$_}
  );
}
my $tile_rect = SDL::Rect->new( 0, 0, $tile{'.'}->w, $tile{'.'}->h );

# {{{ blit in grid cells

for my $x ( 0 .. $cells[0] - 1 ) {
  for my $y ( 0 .. $cells[1] - 1 ) {
    my @bounding_box = $ghd->_bounding_box( coordinate => [ $x, $y ] );
    SDL::Video::blit_surface(
      $tile{$terrain[$x][$y]}, $tile_rect,
      $background,
      SDL::Rect->new( @bounding_box ),
    );
  }
}

# }}}

#
# Create action layer
#
my $action = SDL::Surface->new(
  0, $world{w}, $world{h}, $world{d}, 0
);

# {{{ erase_image

sub erase_image {
  my $x = $vp->viewport->[0] * $cell_size[0];
  my $y = $vp->viewport->[1] * $cell_size[1] * 0.75;
  $x += $cell_size[0] / 2 if $vp->viewport->[1] % 2;
  SDL::Video::blit_surface(
    $background, SDL::Rect->new( $x, $y, $app->w, $app->h ),
    $app, SDL::Rect->new( 0, 0, $app->w, $app->h )
  );
}

# }}}

# {{{ update_game

sub update_game {
  my %direction = (
    o => 0,
    l => 1,
    ',' => 2,
    m => 3,
    j => 4,
    i => 5
  );
  SDL::Events::pump_events();
  if ( SDL::Events::poll_event($event) ) {
    if ( $event->type == SDL_KEYDOWN ) {
      if ( exists $direction{chr( $event->key_sym )} ) {
        $vp->move( direction => $direction{chr($event->key_sym)} );
      }
      elsif ( $event->key_sym == ord( "\e" ) ) {
        die "normal exit";
      }
    }
  }
}

# }}}

# {{{ put_image

sub put_image {
  $ghd->draw_bounding_box(
    coordinate => $vp->cursor,
    surface => $app,
    color => SDL::Video::map_RGBA( $app->format(), 255, 0, 0, 255 )
  );
#  $ghd->draw_hexagon(
#    coordinate => \@actor,
#    surface => $app,
#    color => SDL::Video::map_RGBA( $app->format(), 255, 0, 0, 255 )
#  );
#  $ghd->fill_hexagon(
#    coordinate => \@actor,
#    surface => $app,
#    color => SDL::Video::map_RGBA( $action->format(), 255, 0, 0, 127 )
#  );
  $ghd->draw_actor(
    coordinate => $vp->cursor,
    surface => $app,
    color => SDL::Video::map_RGBA( $app->format(), 0, 0, 255, 127 )
  );

  push @update_rects, SDL::Rect->new( 0, 0, $app->w, $app->h );
}

# }}}

# {{{ maingame

sub maingame {
  my $synchro_ticks = SDL::get_ticks();

  erase_image;
  update_game;
  put_image;
  $frame++;

  SDL::Video::update_rects( $app, @update_rects );
  @update_rects = ();

  my $delay = $TARGET_ANIM_SPEED -
              (SDL::get_ticks() - $synchro_ticks);
  $delay > 0 and Games::FrozenBubble::CStuff::fbdelay($delay);
}

# }}}

# {{{ Main loop

while ( 1 ) {
  eval { maingame };
  last if $@ =~ /normal exit/;
  die $@ if $@;
}

# }}}
